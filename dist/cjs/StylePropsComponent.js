"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("@emotion/react/jsx-runtime");
const react_1 = require("react");
const lodash_1 = require("lodash");
const react_2 = require("@emotion/react");
const cssPropertyMap_1 = require("./cssPropertyMap");
const htmlTagData_1 = require("./htmlTagData");
const special_cases_1 = require("./special-cases");
/**
 * List of valid CSS property names
 */
const cssPropertyNames = Object.keys(cssPropertyMap_1.default);
/**
 * Creates a closure that can check if a given value belongs to a given array
 * Uses a Set for faster lookup
 */
function makeInclusionChecker(array) {
    const asSet = new Set(array);
    return (value) => asSet.has(value);
}
/**
 * A closure to check if a string is a void (no children) tag.
 */
const voidTagsIC = makeInclusionChecker([
    ...htmlTagData_1.voidTags,
]);
/**
 * A closure to check if a string is a CSS property name.
 */
const cssPropertyNamesIC = makeInclusionChecker(cssPropertyNames);
/**
 * A closure to check if a particular tag is a special case.
 */
const specialCaseIC = makeInclusionChecker(special_cases_1.specialCaseList);
function getOriginalFromMangled(name) {
    if (name.startsWith("css")) {
        const withoutCss = name.slice(3);
        if (withoutCss.length === 1) {
            return withoutCss.toLowerCase();
        }
        if (withoutCss.length > 1) {
            return withoutCss.charAt(0).toLowerCase() + withoutCss.slice(1);
        }
        return name;
    }
    return name;
}
/**
 * The style props component
 *
 * Supports ref forwarding, so each component behaves identical to their plain HTML counterpart
 * with regards to React's ref system.
 *
 * Note: The user of this library should never use this component directly.
 */
exports.default = (0, react_1.forwardRef)(function StylePropsComponent(_a, 
/**
 * A reference to an enhanced `ref` prop that enables ref forwarding
 */
ref) {
    var { 
    /**
     * Children to be rendered within the component
     */
    children, 
    /**
     * The html tag to use in `createElement`
     */
    tag, 
    /**
     * EmotionCSS engine does NOT pass down css prop
     * The propagated emotion css data is actually captured in the `className` prop
     */
    className, 
    /**
    * In case I was wrong with the previous statement...
    */
    css: existingCss } = _a, 
    /**
     * This will contain a combination of regular props and style props
     */
    rest = __rest(_a, ["children", "tag", "className", "css"]);
    /**
     * The portion of the remaining props that are interpreted as style props
     */
    const restPropsStyleProps = {};
    /**
     * The portion of the remaining props that are interpreted as regular props
     */
    const restPropsRegularProps = {};
    // Normal case
    if (!specialCaseIC(tag)) {
        // For each prop in `rest`
        for (const [propName, propValue] of Object.entries(rest)) {
            // If the prop is a CSS property then add to style props, otherwise add to regular props
            if (cssPropertyNamesIC(propName)) {
                restPropsStyleProps[propName] = propValue;
            }
            else {
                restPropsRegularProps[propName] = propValue;
            }
        }
        // Special case
    }
    else {
        // Identify the list of css attributes that can conflict in the special case
        const specialCaseAttributeList = special_cases_1.specialCaseMap[tag];
        // Enhance performance by creating a Set for faster lookup
        const specialCaseAttributeListIC = makeInclusionChecker(specialCaseAttributeList);
        // For each prop in `rest`
        for (const [propName, propValue] of Object.entries(rest)) {
            // The css property names also include the special case attributes
            if (cssPropertyNamesIC(propName)) {
                if (specialCaseAttributeListIC(getOriginalFromMangled(propName))) {
                    // If the prop foll`ows the special case naming convention such as "cssWidth" or "cssHeight"
                    if (getOriginalFromMangled(propName) !== propName) {
                        restPropsStyleProps[getOriginalFromMangled(propName)] = propValue;
                    }
                    else {
                        // Must be a regular prop
                        // In the special cases this means that attributes such as "width" and "height"
                        // would be applied preferentially to the regular props
                        // and we would need to add the "css" prefix if we explicitly want a style prop
                        restPropsRegularProps[propName] = propValue;
                    }
                }
                else {
                    // If not a special case attribute we can confidently add it to style props
                    restPropsStyleProps[propName] = propValue;
                }
            }
            else {
                // For sure is regular prop
                restPropsRegularProps[propName] = propValue;
            }
        }
    }
    /**
     * Compile CSS source code compatible with Emotion CSS
     */
    const stylePropsString = `\n\n${Object.entries(restPropsStyleProps)
        .map(([key, value]) => {
        return `${(0, lodash_1.kebabCase)(key)}: ${value};`;
    })
        .join("\n")}\n\n`;
    return (tag == 'a' ? (0, jsx_runtime_1.jsx)("a", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
        tag == 'abbr' ? (0, jsx_runtime_1.jsx)("abbr", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
            tag == 'address' ? (0, jsx_runtime_1.jsx)("address", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                tag == 'area' ? (0, jsx_runtime_1.jsx)("area", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps)) :
                    tag == 'article' ? (0, jsx_runtime_1.jsx)("article", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                        tag == 'aside' ? (0, jsx_runtime_1.jsx)("aside", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                            tag == 'audio' ? (0, jsx_runtime_1.jsx)("audio", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                tag == 'b' ? (0, jsx_runtime_1.jsx)("b", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                    tag == 'base' ? (0, jsx_runtime_1.jsx)("base", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps)) :
                                        tag == 'bdi' ? (0, jsx_runtime_1.jsx)("bdi", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                            tag == 'bdo' ? (0, jsx_runtime_1.jsx)("bdo", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                tag == 'blockquote' ? (0, jsx_runtime_1.jsx)("blockquote", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                    tag == 'body' ? (0, jsx_runtime_1.jsx)("body", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                        tag == 'br' ? (0, jsx_runtime_1.jsx)("br", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps)) :
                                                            tag == 'button' ? (0, jsx_runtime_1.jsx)("button", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                tag == 'canvas' ? (0, jsx_runtime_1.jsx)("canvas", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                    tag == 'caption' ? (0, jsx_runtime_1.jsx)("caption", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                        tag == 'cite' ? (0, jsx_runtime_1.jsx)("cite", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                            tag == 'code' ? (0, jsx_runtime_1.jsx)("code", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                tag == 'col' ? (0, jsx_runtime_1.jsx)("col", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps)) :
                                                                                    tag == 'colgroup' ? (0, jsx_runtime_1.jsx)("colgroup", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                        tag == 'data' ? (0, jsx_runtime_1.jsx)("data", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                            tag == 'datalist' ? (0, jsx_runtime_1.jsx)("datalist", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                tag == 'dd' ? (0, jsx_runtime_1.jsx)("dd", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                    tag == 'del' ? (0, jsx_runtime_1.jsx)("del", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                        tag == 'details' ? (0, jsx_runtime_1.jsx)("details", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                            tag == 'dfn' ? (0, jsx_runtime_1.jsx)("dfn", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                tag == 'dialog' ? (0, jsx_runtime_1.jsx)("dialog", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                    tag == 'div' ? (0, jsx_runtime_1.jsx)("div", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                        tag == 'dl' ? (0, jsx_runtime_1.jsx)("dl", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                            tag == 'dt' ? (0, jsx_runtime_1.jsx)("dt", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                                tag == 'em' ? (0, jsx_runtime_1.jsx)("em", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                                    tag == 'embed' ? (0, jsx_runtime_1.jsx)("embed", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps)) :
                                                                                                                                        tag == 'fieldset' ? (0, jsx_runtime_1.jsx)("fieldset", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                                            tag == 'figcaption' ? (0, jsx_runtime_1.jsx)("figcaption", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                                                tag == 'figure' ? (0, jsx_runtime_1.jsx)("figure", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                                                    tag == 'footer' ? (0, jsx_runtime_1.jsx)("footer", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                                                        tag == 'form' ? (0, jsx_runtime_1.jsx)("form", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                                                            tag == 'h1' ? (0, jsx_runtime_1.jsx)("h1", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                                                                tag == 'h2' ? (0, jsx_runtime_1.jsx)("h2", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                                                                    tag == 'h3' ? (0, jsx_runtime_1.jsx)("h3", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                                                                        tag == 'h4' ? (0, jsx_runtime_1.jsx)("h4", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                                                                            tag == 'h5' ? (0, jsx_runtime_1.jsx)("h5", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                                                                                tag == 'h6' ? (0, jsx_runtime_1.jsx)("h6", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                                                                                    tag == 'head' ? (0, jsx_runtime_1.jsx)("head", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                                                                                        tag == 'header' ? (0, jsx_runtime_1.jsx)("header", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                                                                                            tag == 'hr' ? (0, jsx_runtime_1.jsx)("hr", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps)) :
                                                                                                                                                                                                tag == 'html' ? (0, jsx_runtime_1.jsx)("html", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                                                                                                    tag == 'i' ? (0, jsx_runtime_1.jsx)("i", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                                                                                                        tag == 'iframe' ? (0, jsx_runtime_1.jsx)("iframe", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                                                                                                            tag == 'img' ? (0, jsx_runtime_1.jsx)("img", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps)) :
                                                                                                                                                                                                                tag == 'input' ? (0, jsx_runtime_1.jsx)("input", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps)) :
                                                                                                                                                                                                                    tag == 'ins' ? (0, jsx_runtime_1.jsx)("ins", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                                                                                                                        tag == 'kbd' ? (0, jsx_runtime_1.jsx)("kbd", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                                                                                                                            tag == 'label' ? (0, jsx_runtime_1.jsx)("label", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                                                                                                                                tag == 'legend' ? (0, jsx_runtime_1.jsx)("legend", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                                                                                                                                    tag == 'li' ? (0, jsx_runtime_1.jsx)("li", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                                                                                                                                        tag == 'link' ? (0, jsx_runtime_1.jsx)("link", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps)) :
                                                                                                                                                                                                                                            tag == 'main' ? (0, jsx_runtime_1.jsx)("main", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                                                                                                                                                tag == 'map' ? (0, jsx_runtime_1.jsx)("map", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                                                                                                                                                    tag == 'mark' ? (0, jsx_runtime_1.jsx)("mark", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                                                                                                                                                        tag == 'menu' ? (0, jsx_runtime_1.jsx)("menu", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                                                                                                                                                            tag == 'meta' ? (0, jsx_runtime_1.jsx)("meta", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps)) :
                                                                                                                                                                                                                                                                tag == 'meter' ? (0, jsx_runtime_1.jsx)("meter", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                                                                                                                                                                    tag == 'nav' ? (0, jsx_runtime_1.jsx)("nav", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                                                                                                                                                                        tag == 'noscript' ? (0, jsx_runtime_1.jsx)("noscript", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                                                                                                                                                                            tag == 'object' ? (0, jsx_runtime_1.jsx)("object", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                                                                                                                                                                                tag == 'ol' ? (0, jsx_runtime_1.jsx)("ol", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                                                                                                                                                                                    tag == 'optgroup' ? (0, jsx_runtime_1.jsx)("optgroup", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                                                                                                                                                                                        tag == 'option' ? (0, jsx_runtime_1.jsx)("option", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                                                                                                                                                                                            tag == 'output' ? (0, jsx_runtime_1.jsx)("output", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                                                                                                                                                                                                tag == 'p' ? (0, jsx_runtime_1.jsx)("p", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                                                                                                                                                                                                    tag == 'param' ? (0, jsx_runtime_1.jsx)("param", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps)) :
                                                                                                                                                                                                                                                                                                        tag == 'picture' ? (0, jsx_runtime_1.jsx)("picture", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                                                                                                                                                                                                            tag == 'pre' ? (0, jsx_runtime_1.jsx)("pre", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                                                                                                                                                                                                                tag == 'progress' ? (0, jsx_runtime_1.jsx)("progress", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                                                                                                                                                                                                                    tag == 'q' ? (0, jsx_runtime_1.jsx)("q", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                                                                                                                                                                                                                        tag == 'rp' ? (0, jsx_runtime_1.jsx)("rp", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                                                                                                                                                                                                                            tag == 'rt' ? (0, jsx_runtime_1.jsx)("rt", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                                                                                                                                                                                                                                tag == 'ruby' ? (0, jsx_runtime_1.jsx)("ruby", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                                                                                                                                                                                                                                    tag == 's' ? (0, jsx_runtime_1.jsx)("s", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                                                                                                                                                                                                                                        tag == 'samp' ? (0, jsx_runtime_1.jsx)("samp", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                                                                                                                                                                                                                                            tag == 'script' ? (0, jsx_runtime_1.jsx)("script", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                                                                                                                                                                                                                                                tag == 'section' ? (0, jsx_runtime_1.jsx)("section", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                                                                                                                                                                                                                                                    tag == 'select' ? (0, jsx_runtime_1.jsx)("select", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                                                                                                                                                                                                                                                        tag == 'slot' ? (0, jsx_runtime_1.jsx)("slot", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                                                                                                                                                                                                                                                            tag == 'small' ? (0, jsx_runtime_1.jsx)("small", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                                                                                                                                                                                                                                                                tag == 'source' ? (0, jsx_runtime_1.jsx)("source", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps)) :
                                                                                                                                                                                                                                                                                                                                                                    tag == 'span' ? (0, jsx_runtime_1.jsx)("span", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                                                                                                                                                                                                                                                                        tag == 'strong' ? (0, jsx_runtime_1.jsx)("strong", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                                                                                                                                                                                                                                                                            tag == 'style' ? (0, jsx_runtime_1.jsx)("style", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                                                                                                                                                                                                                                                                                tag == 'sub' ? (0, jsx_runtime_1.jsx)("sub", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                                                                                                                                                                                                                                                                                    tag == 'summary' ? (0, jsx_runtime_1.jsx)("summary", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                                                                                                                                                                                                                                                                                        tag == 'sup' ? (0, jsx_runtime_1.jsx)("sup", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                                                                                                                                                                                                                                                                                            tag == 'table' ? (0, jsx_runtime_1.jsx)("table", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                                                                                                                                                                                                                                                                                                tag == 'tbody' ? (0, jsx_runtime_1.jsx)("tbody", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                                                                                                                                                                                                                                                                                                    tag == 'td' ? (0, jsx_runtime_1.jsx)("td", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                                                                                                                                                                                                                                                                                                        tag == 'template' ? (0, jsx_runtime_1.jsx)("template", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                                                                                                                                                                                                                                                                                                            tag == 'textarea' ? (0, jsx_runtime_1.jsx)("textarea", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                                                                                                                                                                                                                                                                                                                tag == 'tfoot' ? (0, jsx_runtime_1.jsx)("tfoot", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                                                                                                                                                                                                                                                                                                                    tag == 'th' ? (0, jsx_runtime_1.jsx)("th", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                                                                                                                                                                                                                                                                                                                        tag == 'thead' ? (0, jsx_runtime_1.jsx)("thead", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                                                                                                                                                                                                                                                                                                                            tag == 'time' ? (0, jsx_runtime_1.jsx)("time", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                                                                                                                                                                                                                                                                                                                                tag == 'title' ? (0, jsx_runtime_1.jsx)("title", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                                                                                                                                                                                                                                                                                                                                    tag == 'tr' ? (0, jsx_runtime_1.jsx)("tr", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                                                                                                                                                                                                                                                                                                                                        tag == 'track' ? (0, jsx_runtime_1.jsx)("track", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps)) :
                                                                                                                                                                                                                                                                                                                                                                                                                                            tag == 'u' ? (0, jsx_runtime_1.jsx)("u", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                                                                                                                                                                                                                                                                                                                                                tag == 'ul' ? (0, jsx_runtime_1.jsx)("ul", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                                                                                                                                                                                                                                                                                                                                                    tag == 'var' ? (0, jsx_runtime_1.jsx)("var", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                                                                                                                                                                                                                                                                                                                                                        tag == 'video' ? (0, jsx_runtime_1.jsx)("video", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps, { children: children })) :
                                                                                                                                                                                                                                                                                                                                                                                                                                                            tag == 'wbr' ? (0, jsx_runtime_1.jsx)("wbr", Object.assign({ className: className, ref: ref, css: (0, react_2.css) `${className};${existingCss};${stylePropsString}` }, restPropsRegularProps)) :
                                                                                                                                                                                                                                                                                                                                                                                                                                                                (0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, {}));
});
//# sourceMappingURL=StylePropsComponent.js.map